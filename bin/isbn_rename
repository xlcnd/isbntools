#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import sys
import logging

sys.path[:0] = ['/home/christoph/eigene_Programme/'
                'Python/_libraries/isbn-tools/isbntools']

from isbntools import canonical, clean, config, get_canonical_isbn, \
    get_isbnlike, meta, registry
from isbntools.dev.fmt import fmts
from isbntools.dev.rename import checkfileaccess, \
    checkpattern, splitname, newfilename, rename


logger = logging.getLogger(__name__)


def usage(wservs="wcat|goob|..."):
    sys.stderr.write('Usage: isbn_rename [ISBN|\'-f\'] [%s] '
                     '[\'key=\'apikey] [pattern] filename\n  '
                     '...  or try with '
                     'another service in list!\n' % (wservs))
    sys.stderr.write('\n  [pattern] must be a string in quotes containing\n  '
                     'only ASCII letters, digits and \'#\'-_.,() \'\n  '
                     'and one or more of the following placeholders:\n  '
                     '    - {authorsfull} (full names of the author(s))\n  '
                     '    - {authorslast} (last names of the author(s))\n  '
                     '    - {year}\n  '
                     '    - {publisher}\n  '
                     '    - {title}\n  '
                     '    - {isbn}(ISBN-13, if available, else ISBN-10) \n  '
                     '    - {language}\n  '
                     'Author names are separated with commas, (\',\').\n  '
                     'Default pattern is \"'
                     '{authorslast}_{year}_{title}_{isbn}\".\n\n')
    sys.exit(1)


def parse_args(args):
    """
    parse and return a tuple of the command line arguments
    """

    if len(args) == 2:
        return (args[0], None, None, None, args[1])

    if len(args) == 5:
        return (args[0], args[1], args[2][4:], args[3], args[4])

    service = None
    for s in registry.services.keys():
        if args[1] == s:
            service = args[1]

    if not service:  # second arg is pattern
        return (args[0], None, None, args[1], args[-1])

    if len(args) == 3:
        return (args[0], args[1], None, None, args[-1])

    if args[2].startswith('key='):
        return (args[0], args[1], args[2][4:], None, args[-1])
    else:
        return (args[0], args[1], None, args[2], args[-1])


def main(isbnorflag, service, apikey, pattern, filename):

    try:
        if not checkfileaccess(filename):
            return None

        if pattern and not checkpattern(pattern):
            return None

        fpath, fname, fext = splitname(filename)
        if isbnorflag != '-f':
            isbn = get_canonical_isbn(canonical(clean(args[0])))
        else:
            isbn = canonical(get_isbnlike(fname, level='normal')[0])
            if not isbn:
                sys.stderr.write(
                    'no ISBN found in file name \'' + fname + '\'')
                return None

        if apikey:
            try:
                config.add_apikey(service, apikey)
            except:
                pass

        if service:
            metadata = meta(isbn, service)
        else:
            metadata = meta(isbn)

        if pattern:
            newname = newfilename(metadata, pattern) + fext
        else:
            newname = newfilename(metadata) + fext

        newfullname = os.path.join(fpath, newname)

        rename(filename, newfullname)

        sys.stdout.write(
            'renamed \'' + fname + fext + '\' to \'' + newname + '\'')

    except Exception as e:
        sys.stderr.write(e)
        providers = list(registry.services.keys())
        providers.remove('default')
        available = '|'.join(providers)
        try:
            fmts.remove('labels')
        except ValueError as e:
            sys.stderr.write('Already removed \'labels\' from fmts: '
                             + str(e))
        usage(available)
        return None


if __name__ == "__main__":
    args = parse_args(sys.argv[1:])
    main(*args)
